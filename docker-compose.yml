version: '3.8'

services:
  # Database Services
  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest
    environment:
      POSTGRES_DB: groundwater
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/home/postgres/pgdata/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf

  # Backend Services
  ingest-service:
    build: ./services/ingest
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/groundwater
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MQTT_BROKER: mosquitto
    depends_on:
      - timescaledb
      - kafka
      - mosquitto
    restart: unless-stopped

  etl-service:
    build: ./services/etl
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/groundwater
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_URL: redis://redis:6379
    depends_on:
      - timescaledb
      - kafka
      - redis
    restart: unless-stopped

  ml-service:
    build: ./services/ml
    ports:
      - "8002:8000"
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/groundwater
      REDIS_URL: redis://redis:6379
    depends_on:
      - timescaledb
      - redis
    restart: unless-stopped

  api-service:
    build: ./services/api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/groundwater
      REDIS_URL: redis://redis:6379
      ML_SERVICE_URL: http://ml-service:8000
      SECRET_KEY: your-secret-key-here
    depends_on:
      - timescaledb
      - redis
      - ml-service
    restart: unless-stopped

  # Mobile API Gateway (optimized for mobile clients)
  mobile-api:
    build: ./services/api
    ports:
      - "8003:8000"
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/groundwater
      REDIS_URL: redis://redis:6379
      ML_SERVICE_URL: http://ml-service:8000
      SECRET_KEY: your-secret-key-here
      MOBILE_OPTIMIZED: "true"
    depends_on:
      - timescaledb
      - redis
      - ml-service
    restart: unless-stopped

  alert-service:
    build: ./services/alerts
    environment:
      DATABASE_URL: postgresql://postgres:password@timescaledb:5432/groundwater
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: ""
      SMTP_PASS: ""
    depends_on:
      - timescaledb
      - kafka
    restart: unless-stopped

  # Frontend - Desktop/Web
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      API_URL: http://api-service:8000
      WS_URL: ws://api-service:8000
    depends_on:
      - api-service
    restart: unless-stopped

  # Mobile Frontend (PWA optimized)
  mobile-frontend:
    build: ./frontend
    ports:
      - "3001:3000"
    environment:
      API_URL: http://mobile-api:8000
      WS_URL: ws://mobile-api:8000
      MOBILE_MODE: "true"
    depends_on:
      - mobile-api
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped

  # Load Balancer for API services
  nginx-lb:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-service
      - mobile-api
      - frontend
      - mobile-frontend
    restart: unless-stopped

volumes:
  timescale_data:
  grafana_data: